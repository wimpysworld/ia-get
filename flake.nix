# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.6)
{
  # A helpful description of your flake
  description = "ia-get";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-schemas, nixpkgs, rust-overlay }:
    let
      meta = (builtins.fromTOML (builtins.readFile ./Cargo.toml)).package;
      lastModifiedDate = self.lastModifiedDate or self.lastModified or "19700101";
      version = "${builtins.substring 0 8 lastModifiedDate}-${self.shortRev or "dirty"}";

      # Nixpkgs overlays
      overlays = [
        rust-overlay.overlays.default
        (final: prev: rec {
          rustToolchain = final.rust-bin.stable.latest.default;
          rustPlatform = final.makeRustPlatform {
            cargo = rustToolchain;
            rustc = rustToolchain;
          };
        })
      ];

      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit overlays system; };
      });
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            rustToolchain
            rust-analyzer
            nixpkgs-fmt
          ];
        };
      });

      # Package outputs from the flake
      packages = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.rustPlatform.buildRustPackage {
          name = "${meta.name}-${version}";
          src = self;
          cargoLock.lockFile = ./Cargo.lock;
          buildInputs =
            pkgs.lib.optional pkgs.stdenv.isDarwin
              (with pkgs.darwin.apple_sdk.frameworks; [ SystemConfiguration ]);
        };
      });
    };
}
